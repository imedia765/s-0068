import { supabase } from "@/integrations/supabase/client";
import type { TablesInsert } from "@/integrations/supabase/types";
import { Enums } from "@/integrations/supabase/types";

type UserRole = Enums<"user_role">;

export const signUpUser = async (email: string, password: string) => {
  console.log("Attempting to sign up user with email:", email);
  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${window.location.origin}/admin`,
      },
    });

    if (error) {
      console.error("Sign up error:", error);
      
      // Parse the error body if it's a string
      let errorBody;
      try {
        errorBody = typeof error.message === 'string' ? JSON.parse(error.message) : null;
      } catch {
        errorBody = null;
      }

      // Check for rate limit error in different possible locations
      const isRateLimit = 
        error.message?.includes('over_email_send_rate_limit') ||
        errorBody?.code === 'over_email_send_rate_limit' ||
        error.status === 429;

      if (isRateLimit) {
        // Try to extract wait time from various possible locations
        let waitTimeMatch = 
          error.message?.match(/after (\d+) seconds/) ||
          errorBody?.message?.match(/after (\d+) seconds/);
        
        const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
        throw new Error(`Please wait ${waitTime} seconds before trying again.`);
      }
      throw error;
    }

    console.log("Sign up successful:", data);
    return data;
  } catch (error) {
    console.error("Sign up error:", error);
    throw error;
  }
};

export const createUserProfile = async (userId: string, email: string) => {
  console.log("Creating user profile for:", userId);
  
  // First, get the current session to ensure we're authenticated
  const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  
  if (sessionError || !session) {
    console.error("Session error:", sessionError);
    throw new Error("No valid session found");
  }

  const profileData: TablesInsert<'profiles'> = {
    id: userId,
    user_id: userId,
    email,
    role: 'member' as UserRole,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };

  const { data, error } = await supabase
    .from('profiles')
    .insert(profileData)
    .select()
    .single();

  if (error) {
    console.error("Profile creation error:", error);
    throw error;
  }

  console.log("Profile created successfully:", data);
  return data;
};

export const createMember = async (memberData: any, collectorId: string) => {
  console.log("Creating member with data:", { memberData, collectorId });
  
  const memberObject: TablesInsert<'members'> = {
    collector_id: collectorId,
    full_name: memberData.fullName,
    email: memberData.email,
    phone: memberData.mobile,
    address: memberData.address,
    town: memberData.town,
    postcode: memberData.postCode,
    date_of_birth: memberData.dob,
    gender: memberData.gender,
    marital_status: memberData.maritalStatus,
    status: 'pending',
    profile_updated: true,
    member_number: '', // This will be auto-generated by the database trigger
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };

  const { data, error } = await supabase
    .from('members')
    .insert(memberObject)
    .select()
    .single();

  if (error) {
    console.error("Member creation error:", error);
    throw error;
  }

  console.log("Member created successfully:", data);
  return data;
};

export const createRegistration = async (memberId: string) => {
  console.log("Creating registration for member:", memberId);
  
  const { data, error } = await supabase
    .from('registrations')
    .insert({
      member_id: memberId,
      status: 'pending',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    })
    .select()
    .single();

  if (error) {
    console.error("Registration creation error:", error);
    throw error;
  }

  console.log("Registration created successfully:", data);
  return data;
};
