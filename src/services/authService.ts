import { supabase } from "@/integrations/supabase/client";
import type { TablesInsert } from "@/integrations/supabase/types";

export const signUpUser = async (email: string, password: string) => {
  console.log("Attempting to sign up user with email:", email);
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${window.location.origin}/admin`,
    },
  });

  if (error) {
    console.error("Sign up error:", error);
    throw error;
  }

  console.log("Sign up successful:", data);
  return data;
};

export const createUserProfile = async (userId: string, email: string) => {
  console.log("Creating user profile for:", userId);
  
  try {
    const { data: existingProfile, error: lookupError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .maybeSingle();

    if (lookupError) {
      console.error("Profile lookup error:", lookupError);
      throw lookupError;
    }

    if (existingProfile) {
      console.log("Profile already exists for user:", userId);
      return existingProfile;
    }

    const profileData = {
      id: userId,
      email,
      role: 'member',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { data, error: insertError } = await supabase
      .from('profiles')
      .insert(profileData)
      .select()
      .maybeSingle();

    if (insertError) {
      console.error("Profile creation error:", insertError);
      throw insertError;
    }

    if (!data) {
      throw new Error("Profile was not created successfully");
    }

    console.log("Profile created successfully:", data);
    return data;
  } catch (error) {
    console.error("Profile creation error:", error);
    throw error;
  }
};

export const createMember = async (memberData: any, collectorId: string) => {
  console.log("Creating member with data:", { memberData, collectorId });
  
  const memberObject: TablesInsert<'members'> = {
    collector_id: collectorId,
    full_name: memberData.fullName,
    email: memberData.email,
    phone: memberData.mobile,
    address: memberData.address,
    town: memberData.town,
    postcode: memberData.postCode,
    date_of_birth: memberData.dob,
    gender: memberData.gender,
    marital_status: memberData.maritalStatus,
    status: 'pending',
    profile_updated: true,
    member_number: '', // This will be auto-generated by the database trigger
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };

  const { data, error } = await supabase
    .from('members')
    .insert(memberObject)
    .select()
    .maybeSingle();

  if (error) {
    console.error("Member creation error:", error);
    throw error;
  }

  console.log("Member created successfully:", data);
  return data;
};

export const createRegistration = async (memberId: string) => {
  console.log("Creating registration for member:", memberId);
  
  try {
    const { data: existingRegistration, error: lookupError } = await supabase
      .from('registrations')
      .select('*')
      .eq('member_id', memberId)
      .maybeSingle();

    if (lookupError) {
      console.error("Registration lookup error:", lookupError);
      throw lookupError;
    }

    if (existingRegistration) {
      console.log("Registration already exists for member:", memberId);
      return existingRegistration;
    }

    const { data, error: insertError } = await supabase
      .from('registrations')
      .insert({
        member_id: memberId,
        status: 'pending',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .maybeSingle();

    if (insertError) {
      console.error("Registration creation error:", insertError);
      throw insertError;
    }

    if (!data) {
      throw new Error("Registration was not created successfully");
    }

    console.log("Registration created successfully:", data);
    return data;
  } catch (error) {
    console.error("Registration creation error:", error);
    throw error;
  }
};